name: Claims Processor CI/CD

env:
  PYTHON_VERSION: '3.11'
  POSTGRES_DB: claims_test_db
  POSTGRES_USER: claimsuser
  POSTGRES_PASSWORD: Claims2024#Secure!
  AWS_REGION: ap-south-1

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]

jobs:
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    outputs:
      scan_status: ${{ steps.process_scan.outputs.status }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          
      - name: Run security scans
        id: security_scan
        run: |
          mkdir -p reports/security
          bandit -r src/ -f json -o reports/security/bandit.json || true
          safety check -r requirements.txt --json > reports/security/safety.json || true
          
      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: reports/security/
          retention-days: 14

      - name: Process scan results
        id: process_scan
        if: always()
        run: |
          if [ -f reports/security/bandit.json ] && [ -f reports/security/safety.json ]; then
            echo "status=✅ Success" >> $GITHUB_OUTPUT
            echo "Security scans completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "status=⚠️ Warning" >> $GITHUB_OUTPUT
            echo "Security scans partially completed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify Google Chat
        if: always()
        run: |
          STATUS="${{ steps.process_scan.outputs.status }}"
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "{\"text\": \"*Testing Completed*\nRepository: ${{ github.repository }}\nBranch: ${{ github.ref_name }}\nStatus: $STATUS\nDetails: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
            "${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}"

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
          
      - name: Check formatting
        run: |
          black --check src/ tests/ --diff --color > reports/black.txt || echo "Black formatting issues found"
          isort --check-only src/ tests/ --diff --color > reports/isort.txt || echo "Import sorting issues found"
          
      - name: Run type checking
        run: |
          mkdir -p reports/mypy
          mypy src/ tests/ --ignore-missing-imports --html-report reports/mypy --txt-report reports/mypy.txt

      - name: Run pylint
        run: |
          pylint src/ tests/ --output-format=parseable:reports/pylint.txt,json:reports/pylint.json

      - name: Upload code quality reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: code-quality-reports
          path: |
            reports/black.txt
            reports/isort.txt
            reports/mypy
            reports/mypy.txt
            reports/pylint.txt
            reports/pylint.json

  build:
    name: Build and Push Docker Image
    needs: [security-scan, code-quality]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/claims-processor:latest
