name: Claims Processor CI/CD

env:
  PYTHON_VERSION: '3.11'
  POSTGRES_DB: claims_test_db
  POSTGRES_USER: claimsuser
  POSTGRES_PASSWORD: Claims2024#Secure!
  AWS_REGION: ap-south-1

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]

jobs:
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    outputs:
      scan_status: ${{ steps.process_scan.outputs.status }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          
      - name: Run security scans
        id: security_scan
        run: |
          mkdir -p reports/security
          bandit -r src/ -f json -o reports/security/bandit.json || true
          safety check -r requirements.txt --json > reports/security/safety.json || true
          
      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/security/
          retention-days: 14

      - name: Process scan results
        id: process_scan
        if: always()
        run: |
          if [ -f reports/security/bandit.json ] && [ -f reports/security/safety.json ]; then
            echo "status=✅ Success" >> $GITHUB_OUTPUT
            echo "Security scans completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "status=⚠️ Warning" >> $GITHUB_OUTPUT
            echo "Security scans partially completed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify Google Chat
        if: always()
        run: |
          STATUS="${{ steps.process_scan.outputs.status }}"
          MESSAGE="{\"text\": \"*Testing Completed*\nRepository: ${{ github.repository }}\nBranch: ${{ github.ref_name }}\nStatus: $STATUS\nDetails: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}"
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "$MESSAGE" \
            "${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}"

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort mypy pylint lxml
          pip install -r requirements-dev.txt
          
      - name: Create report directories
        run: |
          mkdir -p reports
          mkdir -p reports/mypy
          
      - name: Check formatting
        run: |
          black --check src/ tests/ --diff --color > reports/black.txt || echo "Black formatting issues found"
          isort --check-only src/ tests/ --diff --color > reports/isort.txt || echo "Import sorting issues found"
          
      - name: Run type checking
        run: |
          mypy src/claims_processor tests/ --ignore-missing-imports --html-report reports/mypy --txt-report reports/mypy.txt

      - name: Run pylint
        run: |
          pylint src/ tests/ --output-format=colorized > reports/pylint.txt || true

      - name: Upload code quality reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-reports
          path: |
            reports/black.txt
            reports/isort.txt
            reports/mypy
            reports/mypy.txt
            reports/pylint.txt

  test:
    name: Test
    needs: [security-scan, code-quality]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt
          pip install -r requirements-dev.txt  # Include if necessary
      
      - name: Run tests
        env:
          DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
          PYTHONPATH: ${{ github.workspace }}/src  # Add src/ to PYTHONPATH
        run: |
          mkdir -p reports/tests
          pytest tests/ -v --cov=src --cov-report=xml --junitxml=reports/tests/junit.xml
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            reports/tests
            coverage.xml

  build:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: claims-processor
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
